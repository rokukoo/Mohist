--- a/net/minecraft/util/palette/PalettedContainer.java
+++ b/net/minecraft/util/palette/PalettedContainer.java
@@ -1,13 +_,15 @@
 package net.minecraft.util.palette;
 
-import it.unimi.dsi.fastutil.ints.Int2IntMap;
-import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+
+import it.unimi.dsi.fastutil.ints.Int2IntMap;
+import it.unimi.dsi.fastutil.ints.Int2IntMap.Entry;
+import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -29,27 +_,27 @@
    private final Function<CompoundNBT, T> field_205524_e;
    private final Function<T, CompoundNBT> field_205525_f;
    private final T field_205526_g;
-   protected BitArray field_186021_b;
-   private IPalette<T> field_186022_c;
-   private int field_186024_e;
+   protected volatile BitArray field_186021_b;
+   private volatile IPalette<T> field_186022_c;
+   private volatile int field_186024_e;
    private final ReentrantLock field_210461_j = new ReentrantLock();
 
    public void func_210459_b() {
-      if (this.field_210461_j.isLocked() && !this.field_210461_j.isHeldByCurrentThread()) {
-         String s = Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((p_210458_0_) -> {
-            return p_210458_0_.getName() + ": \n\tat " + (String)Arrays.stream(p_210458_0_.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
-         }).collect(Collectors.joining("\n"));
-         CrashReport crashreport = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
-         CrashReportCategory crashreportcategory = crashreport.func_85058_a("Thread dumps");
-         crashreportcategory.func_71507_a("Thread dumps", s);
-         throw new ReportedException(crashreport);
-      } else {
-         this.field_210461_j.lock();
-      }
+//      if (this.lock.isLocked() && !this.lock.isHeldByCurrentThread()) {
+//         String s = Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((p_210458_0_) -> {
+//            return p_210458_0_.getName() + ": \n\tat " + (String)Arrays.stream(p_210458_0_.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
+//         }).collect(Collectors.joining("\n"));
+//         CrashReport crashreport = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
+//         CrashReportCategory crashreportcategory = crashreport.addCategory("Thread dumps");
+//         crashreportcategory.setDetail("Thread dumps", s);
+//         throw new ReportedException(crashreport);
+//      } else {
+//         this.lock.lock();
+//      }
    }
 
    public void func_210460_c() {
-      this.field_210461_j.unlock();
+//      this.lock.unlock();
    }
 
    public PalettedContainer(IPalette<T> p_i48961_1_, ObjectIntIdentityMap<T> p_i48961_2_, Function<CompoundNBT, T> p_i48961_3_, Function<T, CompoundNBT> p_i48961_4_, T p_i48961_5_) {
@@ -61,13 +_,18 @@
       this.func_186012_b(4);
    }
 
-   private static int func_186011_b(int p_186011_0_, int p_186011_1_, int p_186011_2_) {
+   public static int func_186011_b(int p_186011_0_, int p_186011_1_, int p_186011_2_) { // Mohist - Optimize Randomtick (2nd attempt)
       return p_186011_1_ << 8 | p_186011_2_ << 4 | p_186011_0_;
    }
 
+   private void initialize(int bitsPerObject) { this.func_186012_b(bitsPerObject); } // Paper - OBFHELPER
+
    private void func_186012_b(int p_186012_1_) {
-      if (p_186012_1_ != this.field_186024_e) {
-         this.field_186024_e = p_186012_1_;
+      setBits(p_186012_1_, false);
+   }
+   private void setBits(int bitsIn, boolean forceBits) {
+      if (bitsIn != this.field_186024_e) {
+         this.field_186024_e = bitsIn;
          if (this.field_186024_e <= 4) {
             this.field_186024_e = 4;
             this.field_186022_c = new ArrayPalette<>(this.field_205523_d, this.field_186024_e, this, this.field_205524_e);
@@ -76,6 +_,8 @@
          } else {
             this.field_186022_c = this.field_205521_b;
             this.field_186024_e = MathHelper.func_151241_e(this.field_205523_d.func_186804_a());
+            if (forceBits)
+               this.field_186024_e = bitsIn;
          }
 
          this.field_186022_c.func_186041_a(this.field_205526_g);
@@ -138,14 +_,19 @@
       this.func_210459_b();
       int i = p_186010_1_.readByte();
       if (this.field_186024_e != i) {
-         this.func_186012_b(i);
+         this.setBits(i, true); //Forge, Force bit density to fix network issues, resize below if needed.
       }
 
       this.field_186022_c.func_186038_a(p_186010_1_);
       p_186010_1_.func_186873_b(this.field_186021_b.func_188143_a());
       this.func_210460_c();
+
+      int regSize = MathHelper.func_151241_e(this.field_205523_d.func_186804_a());
+      if (this.field_186022_c == field_205521_b && this.field_186024_e != regSize) // Resize bits to fit registry.
+         this.onResize(regSize, field_205526_g);
    }
 
+   public void writeDataPaletteBlock(PacketBuffer packetDataSerializer) { this.func_186009_b(packetDataSerializer); } // Paper - OBFHELPER
    public void func_186009_b(PacketBuffer p_186009_1_) {
       this.func_210459_b();
       p_186009_1_.writeByte(this.field_186024_e);
@@ -237,4 +_,10 @@
    public interface ICountConsumer<T> {
       void accept(T p_accept_1_, int p_accept_2_);
    }
+
+   private final IPalette<T> getDataPaletteGlobal() { return this.field_205521_b; } // Paper - OBFHELPER
+   public final BitArray getDataBits() { return this.field_186021_b; } // Paper - OBFHELPER
+   private IPalette<T> getDataPalette() { return this.field_186022_c; } // Paper - OBFHELPER
+   private int getBitsPerObject() { return this.field_186024_e; } // Paper - OBFHELPER
+
 }
